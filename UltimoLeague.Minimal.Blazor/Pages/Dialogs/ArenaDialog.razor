@using System.ComponentModel.DataAnnotations
@inject IBaseService _service
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudOverlay Visible="overlayVisible" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Stadium" Class="mr-3 mb-n1" />
            @(currentArena is null ? "Add New Arena" : "Edit Arena")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@request" @ref="@form">
            <MudTextField T="string" Label="Name" Class="mt-3" InputType="InputType.Text"
                @bind-Value="request.ArenaName" For="@(() => request.ArenaName)"
                Required="true" RequiredError="A Name is required!" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled">Ok</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Error" Variant="Variant.Filled">Cancel</MudButton>       
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance dialog { get; set; }
    [Parameter] public ArenaDto currentArena { get; set; }
    private ArenaRequest request = new ArenaRequest();
    private MudForm form;
    private bool overlayVisible = false;

    protected override void OnParametersSet()
    {
        if (currentArena is not null)
        {
            request.ArenaName = currentArena.ArenaName;
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            overlayVisible = true;
            ErrorOr<ArenaDto> result;

            if (currentArena is null)
            {
                result = await _service.Post<ArenaDto>("arenas", request);
            }
            else
            {
                ArenaDto arenaUpdateRequest = new()
                {
                    ArenaName = request.ArenaName,
                    Id = currentArena.Id
                };

                result = await _service.Put<ArenaDto>($"arenas/{currentArena.Id}", arenaUpdateRequest);
            }

            overlayVisible = false;

            if (result.IsError)
            {
                _snackbar.Add(result.FirstError.Description, Severity.Error);
            }
            else
            {
                _snackbar.Add($"Arena {request.ArenaName} was { (currentArena is null ? "Created" : "Updated")}!", Severity.Success);
                dialog.Close(DialogResult.Ok(true));
            }
        }
    }

    private void Cancel()
    {
        dialog.Cancel();
    }
}
