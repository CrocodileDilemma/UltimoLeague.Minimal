@using System.ComponentModel.DataAnnotations
@inject IBaseService _service
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudOverlay Visible="overlayVisible" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.TableRows" Class="mr-3 mb-n1" />
            @(currentLeague is null ? "Add New League" : "Edit League")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@request" @ref="@form">
            <MudTextField T="string" Label="Code" Class="mt-3" InputType="InputType.Text"
                          @bind-Value="request.Code" For="@(() => request.Code)"
                          Required="true" RequiredError="A Code is required!" />
            <MudTextField T="string" Label="Name" Class="mt-3" InputType="InputType.Text"
                @bind-Value="request.Name" For="@(() => request.Name)"
                Required="true" RequiredError="A Name is required!" />
            <MudTextField T="int" Label="Level" Class="mt-3" InputType="InputType.Number"
                          @bind-Value="request.Level" For="@(() => request.Level)" />
            <MudField Label="Gender" Variant="Variant.Outlined">
                <MudRadioGroup @bind-SelectedOption="request.Gender">
                    <MudRadio Option="@(DAL.Common.Gender.None)">None</MudRadio>
                    <MudRadio Option="@(DAL.Common.Gender.Male)">Male</MudRadio>
                    <MudRadio Option="@(DAL.Common.Gender.Female)">Female</MudRadio>
                </MudRadioGroup>
            </MudField>
            <MudSelect T="DtoBase" Label="Sport" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter"
                       @bind-Value="selectedSport" For="@(() => selectedSport)"
                       Required="true" RequiredError="A Sport is required!">
                @foreach (var sport in sports)
                {
                    <MudSelectItem Value="@(new DtoBase(sport.Id, sport.SportName))" />
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled">Ok</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Error" Variant="Variant.Filled">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance dialog { get; set; }
    [Parameter] public LeagueDto currentLeague { get; set; }
    private LeagueRequest request = new LeagueRequest();
    private MudForm form;
    private bool overlayVisible = true;
    private IEnumerable<SportMinimalDto> sports = Enumerable.Empty<SportMinimalDto>();
    private DtoBase selectedSport { get; set; }

    protected override void OnParametersSet()
    {
        if (currentLeague is not null)
        {
            request.Code = currentLeague.Code;
            request.Name = currentLeague.Name;
            request.Gender = currentLeague.Gender;
            request.Level = currentLeague.Level;
            request.SportId = currentLeague.Sport.Id;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ErrorOr<IEnumerable<SportMinimalDto>> result = await _service.Get<IEnumerable<SportMinimalDto>>("sports");
        overlayVisible = false;
        if (!result.IsError)
        {
            sports = result.Value;

            if (currentLeague is not null)
            {
                var sport = sports.FirstOrDefault(x => x.Id == currentLeague.Sport.Id);
                if (sport is not null)
                {
                    selectedSport = new DtoBase(sport.Id, sport.SportName);
                }
                else
                {
                    request.SportId = null;
                }
            }
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            overlayVisible = true;
            request.SportId = selectedSport.Id;
            ErrorOr<LeagueDto> result;

            if (currentLeague is null)
            {
                result = await _service.Post<LeagueDto>("leagues", request);
            }
            else
            {
                LeagueUpdateRequest updateRequest = new()
                {
                    Code = request.Code,
                    Name = request.Name,
                    Gender = request.Gender,
                    Level = request.Level,
                    SportId = request.SportId,
                    Id = currentLeague.Id
                };

                result = await _service.Put<LeagueDto>($"leagues/{currentLeague.Id}", updateRequest);
            }

            overlayVisible = false;

            if (result.IsError)
            {
                _snackbar.Add(result.FirstError.Description, Severity.Error);
            }
            else
            {
                _snackbar.Add($"League {request.Name} was {(currentLeague is null ? "Created" : "Updated")}!", Severity.Success);
                dialog.Close(DialogResult.Ok(true));
            }
        }
    }

    private void Cancel()
    {
        dialog.Cancel();
    }
}
