@using System.Security.Claims
@inherits LayoutComponentBase

@inject IAuthenticationService _authService
@inject IDialogService _dialogService
@inject NavigationManager _nm

<MudThemeProvider />
<MudDialogProvider CloseOnEscapeKey="true" FullWidth="true"/>
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@ToggleIcon()" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h5" Class="ml-3">Ultimo League</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudMenu Color="Color.Inherit" Size="Size.Medium" Label=@context?.User?.FindFirst(ClaimTypes.Email)?.Value
                         AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudAvatar Color="Color.Success" Variant="Variant.Outlined">@context?.User?.Identity?.Name?.Substring(0,1)</MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudButton Variant="Variant.Text" EndIcon="@Icons.TwoTone.Edit"
                            Color="Color.Inherit" OnClick="HandleProfile" FullWidth="true">Edit Profile</MudButton>
                        <MudButton Variant="Variant.Text" EndIcon="@Icons.TwoTone.Logout"
                            Color="Color.Inherit" OnClick="HandleLogout" FullWidth="true">Logout</MudButton>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudMenu Icon="@Icons.TwoTone.Person" Color="Color.Inherit" Size="Size.Medium" 
                    AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopRight" Label="Login">
                    <MudButton Variant="Variant.Text" EndIcon="@Icons.TwoTone.AppRegistration"
                        Color="Color.Inherit" OnClick="HandleRegister" FullWidth="true">Register</MudButton>
                    <MudButton Variant="Variant.Text" EndIcon="@Icons.TwoTone.Login"
                        Color="Color.Inherit" OnClick="HandleLogin" FullWidth="true">Login</MudButton>
                </MudMenu>
            </NotAuthorized>
        </AuthorizeView>       
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu Color="Color.Inherit">
            <MudNavLink Match="NavLinkMatch.All" Href="/sports">Sports</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/arenas">Arenas</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/leagues">Leagues</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/teams">Teams</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/players">Players</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/fixtures">Fixtures</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/results">Results</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/statistics">Statistics</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code 
{
    private bool drawerOpen = false;

    private void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }

    private string ToggleIcon()
    {
        return drawerOpen ? Icons.Material.Filled.MoreHoriz : Icons.Material.Filled.MoreVert;
    }

    private async Task HandleLogin() 
    {
        await ShowDialog(_dialogService.Show<Login>("Login"));
    }

    private async Task HandleLogout()
    {
        await _authService.Logout();
        this.StateHasChanged();
    }

    private async Task HandleProfile()
    {
        await ShowDialog(_dialogService.Show<Profile>("Edit Profile"));
    }

    private async Task HandleRegister()
    {
        await ShowDialog(_dialogService.Show<Register>("Register New User"));
    }

    private async Task ShowDialog(IDialogReference dialog)
    {
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            this.StateHasChanged();
        }
    }
}