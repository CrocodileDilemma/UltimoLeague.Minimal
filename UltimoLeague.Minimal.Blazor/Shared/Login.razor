@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService _authService
@inject ISnackbar _snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.SupervisedUserCircle" Class="mr-3 mb-n1" />
            Login
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@request" @ref="@form">
            <MudTextField T="string" Label="Email" Class="mt-3" InputType="InputType.Email"
                          @bind-Value="request.EmailAddress" For="@(() => request.EmailAddress)" 
                          Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" />
            <MudTextField T="string" Label="Password" Class="mt-3" InputType="InputType.Password"
                          @bind-Value="request.Password" For="@(() => request.Password)"
                          Required="true" RequiredError="Password is required!" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="LoginAsync" Color="Color.Primary">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance dialog { get; set; }
    private SessionRequest request = new SessionRequest();
    private MudForm form;

    private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            ErrorOr<SessionDto> result = await _authService.Login(request);
            if (result.IsError)
            {
                _snackbar.Add(result.FirstError.Description, Severity.Error);
            }
            else
            {
                _snackbar.Add("Login Successful!", Severity.Success);
                dialog.Close(DialogResult.Ok(true));
            }
        }
    }

    private void Cancel()
    {
        dialog.Cancel();
    }
}