@using System.ComponentModel.DataAnnotations
@inject IBaseService _service
@inject ISnackbar _snackbar

<MudOverlay Visible="overlayVisible" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Password" Class="mr-3 mb-n1" />
            Reset Password
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@request" @ref="@form">
            <MudTextField T="string" Label="Reset Token" Class="mt-3" InputType="InputType.Text"
                          @bind-Value="request.ResetToken" For="@(() => request.ResetToken)"
                          Required="true" RequiredError="Reset Token is required!" />
            <MudTextField T="string" Label="Password" Class="mt-3" InputType="InputType.Password"
                          @bind-Value="request.Password" For="@(() => request.Password)"
                          Required="true" RequiredError="Password is required!" />
            <MudTextField T="string" Label="Confirm Password" Class="mt-3" InputType="InputType.Password"
                          @bind-Value="request.ConfirmPassword" For="@(() => request.ConfirmPassword)"
                          Required="true" RequiredError="Confirmation Password is required!"
                          Validation="@(new Func<string, string>(PasswordsMatch))" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ResetAsync" Color="Color.Primary" Variant="Variant.Filled">Ok</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Error" Variant="Variant.Filled">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance dialog { get; set; }
    private ResetPasswordRequest request = new ResetPasswordRequest();
    private MudForm form;
    private bool overlayVisible = false;

    private string PasswordsMatch(string arg)
    {
        return request.Password == arg ? null : "Passwords do not match";
    }

    private async Task ResetAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            overlayVisible = true;
            ErrorOr<MessageDto> result = await _service.Post<MessageDto>("users/reset", request);
            overlayVisible = false;

            if (result.IsError)
            {
                _snackbar.Add(result.FirstError.Description, Severity.Error);
            }
            else
            {
                _snackbar.Add(result.Value.Message, Severity.Success);
                dialog.Close(DialogResult.Ok(true));
            }
        }
    }

    private void Cancel()
    {
        dialog.Cancel();
    }
}